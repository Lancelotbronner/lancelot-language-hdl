scopeName: 'source.hdl'
name: 'HDL'
fileTypes: [ 'hdl' ]
limitLineLength: false

patterns: [
    { include: '#commentline' },
    { include: '#commentblock' },
    { include: '#chip' },
]

repository:

    ############
    # Sections #
    ############

    chip: {
        name: 'meta.chip'
        begin: '(CHIP) (.+) {'
        end: '}'
        beginCaptures:
            1: name: 'keyword.other'
            2: name: 'entity.name.type'
        patterns: [
            { include: '#in' },
            { include: '#out' },
            { include: '#builtin' },
            { include: '#parts' },
            { include: '#commentline' },
            { include: '#commentblock' }
        ]
    }

    in: {
        name: 'meta.input'
        begin: '\\bIN'
        end: '\n'
        beginCaptures:
            0: name: 'keyword.other'
        patterns: [{ include: '#variable' }]
    }
    out: {
        name: 'meta.output'
        begin: '\\bOUT'
        end: '\n'
        beginCaptures:
            0: name: 'keyword.other'
        patterns: [{ include: '#variable' }]
    }
    builtin: {
        name: 'meta.builtin'
        match: '(BUILTIN) (\\w+);'
        captures:
            1: name: 'keyword.other'
            2: name: 'support.type'
    }
    parts: {
        name: 'meta.parts'
        begin: '(PARTS):\n'
        end: '\n\\s*\n'
        beginCaptures:
            1: name: 'keyword.other'
        patterns: [
            { include: '#commentline' },
            { include: '#commentblock' },
            { include: '#part' }
        ]
    }

    ############
    # Elements #
    ############

    variable: {
        name: 'meta.parameter'
        match: '(\\w+)(?:\\[(\\d+)\\])?[;,]'
        captures:
            1: name: 'variable.parameter'
            2: name: 'constant.numeric'
    }
    part: {
        name: 'meta.part'
        begin: '(\\w+)\\s*\\('
        end: ';'
        beginCaptures:
            1: name: 'entity.name.type'
        patterns: [
            { include: '#reference' }
        ]
    }
    reference: {
        name: 'meta.reference'
        match: '(\\w+)(?:\\[(\\d+)(?:(\\.\\.)(\\d+))?\\])?'
        captures:
            1: name: 'variable.other'
            2: name: 'constant.numeric'
            3: name: 'keyword.control'
            4: name: 'constant.numeric'
    }

    ############
    # Comments #
    ############

    commentline: {
        name: 'comment.line.double-dash'
        match: '//.*$'
    },
    commentblock: {
        name: 'comment.block.documentation'
        begin: '/\\*\\*'
        end: '\\*/'
    }
